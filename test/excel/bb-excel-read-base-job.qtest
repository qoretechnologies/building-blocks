#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%strict-args
%new-style
%enable-all-warnings

%exec-class BBM_TestExcelReadBaseJob

%requires QorusInterfaceTest
%requires Util
%requires FsUtil
%requires ssh2

class BBM_TestExcelReadBaseJob inherits QorusJobTest {
    private {
        const JobName = "bb-excel-read-base-job";
    }

    constructor() : QorusJobTest(JobName, "1.0", \ARGV, Opts) {
        addTestCase("Excel read base job test", \excelReadBaseJobTest());
        set_return_value(main());
    }

    private usageIntern(int offset = OffsetColumn) {
        TestReporter::usageIntern(OffsetColumn);
    }

    excelReadBaseJobTest() {
        hash<auto> job_config = {
            "excel-read-path": normalize_dir(get_script_dir() + "/test.xlsx"),
            "excel-read-header-cells": "1",
            "excel-read-worksheet": "MySheet-2",
        };
        map qrest.put("jobs/" + JobName + "/config/" + $1.key, {"value": $1.value}), job_config.pairIterator();
        on_exit {
            map qrest.del("jobs/" + JobName + "/config/" + $1), keys job_config;
        }

        RunJobResult job(OMQ::StatComplete);
        exec(job);

        int jiid = job.getJobResult().job_instanceid;
        hash<auto> results = qrest.get("jobresults/" + jiid).info;
        on_error printf("%N\n", results);
        assertEq((
            {"col1a": "d", "col2a": 4.0, "col3a": 2021-03-26},
            {"col1a": "e", "col2a": 5.0, "col3a": 2021-03-27},
            {"col1a": "f", "col2a": 6.0, "col3a": 2021-03-28},
        ), results.excel);
    }
}
