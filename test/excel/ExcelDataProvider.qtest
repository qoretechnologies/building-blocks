#!/usr/bin/env qore

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires ../../ExcelDataProvider/qlib/ExcelDataProvider

%requires QUnit

%exec-class ExcelDataProviderTest

class ExcelDataProviderTest inherits Test {
    constructor() : Test("ExcelDataProviderTest", "1.0") {
        addTestCase("test", \excelTest());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    excelTest() {
        assertEq(<CellRangeInfo>{
            "start": <CellLocationInfo>{
                "column": "-",
                "row": 1,
            },
            "end": <CellLocationInfo>{
                "column": "-",
                "row": -1,
            },
        }, ExcelReadDataProvider::parseRange("1"));

        assertEq(<CellRangeInfo>{
            "start": <CellLocationInfo>{
                "column": "-",
                "row": 2,
            },
            "end": <CellLocationInfo>{
                "column": "-",
                "row": 10,
            },
        }, ExcelReadDataProvider::parseRange("2:10"));

        assertEq(<CellRangeInfo>{
            "start": <CellLocationInfo>{
                "column": "a",
                "row": 1,
            },
            "end": <CellLocationInfo>{
                "column": "z",
                "row": 10,
            },
        }, ExcelReadDataProvider::parseRange("a1:z10"));

        assertThrows("EXCEL-INVALID-LOCATION", \ExcelReadDataProvider::parseRange(), "b2:a1");
        assertThrows("EXCEL-INVALID-LOCATION", \ExcelReadDataProvider::parseRange(), "a2:b1");

        {
            ExcelReadDataProvider xl(get_script_dir() + "/test.xlsx", {
                "header_cells": "1",
            });
            assertEq(("MySheet-1", "MySheet-2"), xl.getChildProviderNames());

            ExcelWorksheetReadDataProvider sheet = xl.getChildProvider("MySheet-2");

            list<hash<auto>> rows = map $1, sheet.searchRecords();
            assertEq((
                {"col1a": "d", "col2a": 4.0, "col3a": 2021-03-26},
                {"col1a": "e", "col2a": 5.0, "col3a": 2021-03-27},
                {"col1a": "f", "col2a": 6.0, "col3a": 2021-03-28},
            ), rows);
        }

        {
            ExcelReadDataProvider xl(get_script_dir() + "/test.xlsx", {
                "header_cells": "b1:c1",
                "data_cells": "b3:c4",
            });
            assertEq(("MySheet-1", "MySheet-2"), xl.getChildProviderNames());

            ExcelWorksheetReadDataProvider sheet = xl.getChildProvider("MySheet-2");

            list<hash<auto>> rows = map $1, sheet.searchRecords();
            assertEq((
                {"col2a": 5.0, "col3a": 2021-03-27},
                {"col2a": 6.0, "col3a": 2021-03-28},
            ), rows);
        }

        {
            ExcelReadDataProvider xl(get_script_dir() + "/test.xlsx", {
                "headers": ("str", "num", "date"),
                "data_cells": "2",
            });
            assertEq(("MySheet-1", "MySheet-2"), xl.getChildProviderNames());

            ExcelWorksheetReadDataProvider sheet = xl.getChildProvider("MySheet-2");

            list<hash<auto>> rows = map $1, sheet.searchRecords();
            assertEq((
                {"str": "d", "num": 4.0, "date": 2021-03-26},
                {"str": "e", "num": 5.0, "date": 2021-03-27},
                {"str": "f", "num": 6.0, "date": 2021-03-28},
            ), rows);
        }

        {
            ExcelReadDataProvider xl(get_script_dir() + "/test.xlsx", {
                "header_cells": "1",
            });
            ExcelWorksheetReadDataProvider sheet({
                "path": get_script_dir() + "/test.xlsx",
                "header_cells": "1",
                "worksheet": "MySheet-2",
            });

            list<hash<auto>> rows = map $1, sheet.searchRecords();
            assertEq((
                {"col1a": "d", "col2a": 4.0, "col3a": 2021-03-26},
                {"col1a": "e", "col2a": 5.0, "col3a": 2021-03-27},
                {"col1a": "f", "col2a": 6.0, "col3a": 2021-03-28},
            ), rows);
        }

        {
            ExcelReadDataProvider xl(get_script_dir() + "/test.xlsx", {
                "header_cells": "1",
            });
            ExcelWorksheetReadDataProvider sheet({
                "path": get_script_dir() + "/test.xlsx",
                "header_cells": "1",
            });

            list<hash<auto>> rows = map $1, sheet.searchRecords();
            assertEq((
                {"col1": "a", "col2": 1.0, "col3": 2021-04-26},
                {"col1": "b", "col2": 2.0, "col3": 2021-04-27},
                {"col1": "c", "col2": 3.0, "col3": 2021-04-28},
            ), rows);
        }
    }
}