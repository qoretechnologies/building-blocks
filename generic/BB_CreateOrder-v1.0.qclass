# -*- mode: qore; indent-tabs-mode: nil -*-

# name: BB_CreateOrder
# version: 1.0
# desc: base class for creating a workflow order from an interface building block
# author: Qore Technologies, s.r.o.
%new-style
%require-types
%strict-args
%enable-all-warnings

class BB_CreateOrder {
    public {
        #! value indicating the duplicate orders should be returned transparently with a success response
        const RE_SUCCESS = "SUCCESS";

        #! value indicating that duplicate orders should have a DUPLICATE-ORDER-KEY exception thrown
        const RE_DUPLICATE = "DUPLICATE";
    }

    static int createWorkflowOrder(hash<auto> order_context_data = {}) {
        # create the workflow order with the mapper
        string mapper_name = UserApi::getConfigItemValue("workflow-order-mapper");
        Mapper mapper = UserApi::getMapper(mapper_name);
        hash<auto> order_data = mapper.mapData(order_context_data);
        UserApi::logDebug("mapper %y mapped order data: %y", mapper_name, order_data);

        softint workflow_instanceid;
        try {
            workflow_instanceid = UserApi::createOrder(
                UserApi::getConfigItemValue("workflow-name"),
                UserApi::getConfigItemValue("workflow-version"),
                order_data,
            );
            UserApi::logInfo("Created workflow order instance id: %d", workflow_instanceid);
            return workflow_instanceid;
        } catch (hash<ExceptionInfo> ex) {
            if (ex.err == "DUPLICATE-ORDER-KEY") {
                # check if there's only one order
                if (ex.arg.workflow_instance_ids.size() == 1
                    && UserApi::getConfigItemValue("workflow-duplicate-handling") == RE_SUCCESS) {
                    workflow_instanceid = ex.arg.workflow_instance_ids[0];
                    log(LL_INFO, "duplicate order detected: order instance ID %y was detected (%s: %s)",
                        workflow_instanceid, ex.err, ex.desc);
                    return workflow_instanceid;
                }
            }
            rethrow;
        }
    }

    static hash<string, hash<ConfigItemInfo>> getConfigItems() {
        return {
            "workflow-order-mapper": <ConfigItemInfo>{
                "description": "the name of the mapper to create the workflow order data",
                "strictly_local": True,
                "config_group": "Main",
            },
            "workflow-name": <ConfigItemInfo>{
                "description": "the name of the workflow",
                "strictly_local": True,
                "config_group": "Main",
            },
            "workflow-version": <ConfigItemInfo>{
                "type": "*string",
                "default_value": NOTHING,
                "description": "the version of the workflow; if not set (the default), the latest version will be used",
                "strictly_local": True,
                "config_group": "Main",
            },

            "workflow-duplicate-handling": <ConfigItemInfo>{
                "description": "how should workflows with duplicate unique keys be handled: SUCCESS = the workflow "
                    "order instance ID is returned normally, DUPLICATE = the DUPLICATE-ORDER-KEY exception is "
                    "rethrown",
                "default_value": RE_SUCCESS,
                "strictly_local": True,
                "allowed_values": (RE_SUCCESS, RE_DUPLICATE),
                "config_group": "Recovery",
            },

        };
    }
}
# END