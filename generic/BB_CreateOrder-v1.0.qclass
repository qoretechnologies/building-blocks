# -*- mode: qore; indent-tabs-mode: nil -*-

# name: BB_CreateOrder
# version: 1.0
# desc: base class for creating a workflow order from an interface building block
# author: Qore Technologies, s.r.o.
%new-style
%require-types
%strict-args
%enable-all-warnings

#! creates a workflow order from the input data according to the configuration
/** supports atomic workflow order creation through handling \c DUPLICATE-ORDER-KEY exceptions thrown by
    @ref UserApi::createOrder()

    Configuration items:
    - \c create-workflow-order-mapper: the mapper used to create the static order data for the order; the mapper
      returns the value used for the @ref UserApi::createOrder() \a params option giving the new workflow order
      information
    - \c create-workflow-name: the name of the workflow to create the order for
    - \c create-workflow-version: the optional version of the workflow, if not set, then an order will be created for
      the latest version of the workflow
    - \c create-workflow-duplicate-handling: set to determine how duplicate errors are handled; set to \c "SUCCESS" to
      enable the @ref BB_CreateOrder::createWorkflowOrder() method to return the workflow_instanceid in case a single
      workflow_instanceid matches, set to \c "DUPLICATE" to throw a \c DUPLICATE-ORDER-KEY exception in all cases if
      duplicates are found

      @note No comparison of the order data is made in case of duplicated; it is assumed that the data is identical
*/
class BB_CreateOrder {
    public {
        #! value indicating the duplicate orders should be returned transparently with a success response
        const RE_SUCCESS = "SUCCESS";

        #! value indicating that duplicate orders should have a \c DUPLICATE-ORDER-KEY exception thrown
        const RE_DUPLICATE = "DUPLICATE";
    }

    #! creates the order with the input data, returns the workflow_instanceid of the order created
    /** @param order_context_data the input data provided to the mapper (defined by the \c create-workflow-order-mapper config item)

        @return the workflow_instanceid of the order created

        @throw DUPLICATE-ORDER-KEY if unique options are provided to the @ref UserApi::createOrder() call and more
        than one order conflicts with the unique keys given, then this exception is thrown in all cases; this
        exception is also thrown even with one match if the \c create-workflow-duplicate-handling config item is set
        to \c "DUPLICATE"
    */
    static int createWorkflowOrder(hash<auto> order_context_data = {}, string status = UserApi::getConfigItemValue("create-workflow-order-status")) {
        # create the workflow order with the mapper
        string mapper_name = UserApi::getConfigItemValue("create-workflow-order-mapper");
        Mapper mapper = UserApi::getMapper(mapper_name);
        hash<auto> order_data = mapper.mapData(order_context_data);
        UserApi::logInfo("mapper %y mapped order data: %y", mapper_name, order_data);

        softint workflow_instanceid;
        try {
            workflow_instanceid = UserApi::createOrder(
                UserApi::getConfigItemValue("create-workflow-name"),
                UserApi::getConfigItemValue("create-workflow-version"),
                order_data,
                status,
            );
            UserApi::logInfo("Created workflow order instance id: %d with status %y", workflow_instanceid, status);
            return workflow_instanceid;
        } catch (hash<ExceptionInfo> ex) {
            if (ex.err == "DUPLICATE-ORDER-KEY") {
                # check if there's only one order
                if (ex.arg.workflow_instance_ids.size() == 1
                    && UserApi::getConfigItemValue("create-workflow-duplicate-handling") == RE_SUCCESS) {
                    workflow_instanceid = ex.arg.workflow_instance_ids[0];
                    log(LL_INFO, "duplicate order detected: order instance ID %y was detected (%s: %s)",
                        workflow_instanceid, ex.err, ex.desc);
                    return workflow_instanceid;
                }
            }
            UserApi::logError("duplicate order error: %s: %s (ids: %y)", ex.err, ex.desc, ex.arg.workflow_instance_ids);
            rethrow;
        }
    }

    #! returns the config items as documented in the class documentation
    static hash<string, hash<ConfigItemInfo>> getConfigItems() {
        return {
            # order creation
            "create-workflow-order-mapper": <ConfigItemInfo>{
                "description": "the name of the mapper to create the workflow order data",
                "strictly_local": True,
                "config_group": "Create Workflow Order",
            },
            "create-workflow-name": <ConfigItemInfo>{
                "description": "the name of the workflow",
                "strictly_local": True,
                "config_group": "Create Workflow Order",
            },
            "create-workflow-version": <ConfigItemInfo>{
                "type": "*string",
                "default_value": NOTHING,
                "description": "the version of the workflow; if not set (the default), the latest version will be used",
                "strictly_local": True,
                "config_group": "Create Workflow Order",
            },
            "create-workflow-order-status": <ConfigItemInfo>{
                "type": "string",
                "default_value": OMQ::StatReady,
                "allowed_values": (OMQ::StatReady, OMQ::StatBlocked),
                "description": "the initial status of the workflow order",
                "strictly_local": True,
                "config_group": "Create Workflow Order",
            },

            # order creation recovery
            "create-workflow-duplicate-handling": <ConfigItemInfo>{
                "description": "how should workflows with duplicate unique keys be handled: SUCCESS = the workflow "
                    "order instance ID is returned normally, DUPLICATE = the DUPLICATE-ORDER-KEY exception is "
                    "rethrown",
                "default_value": RE_SUCCESS,
                "strictly_local": True,
                "allowed_values": (RE_SUCCESS, RE_DUPLICATE),
                "config_group": "Create Workflow Order Recovery",
            },
        };
    }
}
# END