# -*- mode: qore; indent-tabs-mode: nil -*-

# name: BB_CreateOrder
# version: 1.0
# desc: base class for creating a workflow order from an interface building block
# author: Qore Technologies, s.r.o.
%new-style
%require-types
%strict-args
%enable-all-warnings

#! for create order options
hashdecl CreateOrderOptionInfo {
    #! the status of the order
    string status = UserApi::getConfigItemValue("create-workflow-order-status");
    #! the mapper to use
    string mapper = UserApi::getConfigItemValue("create-workflow-order-mapper");
    #! the workflow name
    string workflow = UserApi::getConfigItemValue("create-workflow-name");
    #! the optional workflow version
    *string version = UserApi::getConfigItemValue("create-workflow-version");
    #! mapper options
    *hash<auto> mapper_opts;
}

#! creates a workflow order from the input data according to the configuration
/** supports atomic workflow order creation through handling \c DUPLICATE-ORDER-KEY exceptions thrown by
    @ref UserApi::createOrder()

    Configuration items:
    - \c create-workflow-order-mapper: the mapper used to create the static order data for the order; the mapper
      returns the value used for the @ref UserApi::createOrder() \a params option giving the new workflow order
      information
    - \c create-workflow-name: the name of the workflow to create the order for
    - \c create-workflow-version: the optional version of the workflow, if not set, then an order will be created for
      the latest version of the workflow
    - \c create-workflow-duplicate-handling: set to determine how duplicate errors are handled; set to \c "SUCCESS" to
      enable the @ref BB_CreateOrder::createWorkflowOrder() method to return the workflow_instanceid in case a single
      workflow_instanceid matches, set to \c "DUPLICATE" to throw a \c DUPLICATE-ORDER-KEY exception in all cases if
      duplicates are found

      @note No comparison of the order data is made in case of duplicated; it is assumed that the data is identical
*/
class BB_CreateOrder {
    public {
        #! value indicating the duplicate orders should be returned transparently with a success response
        const RE_SUCCESS = "SUCCESS";

        #! value indicating that duplicate orders should have a \c DUPLICATE-ORDER-KEY exception thrown
        const RE_DUPLICATE = "DUPLICATE";

        #! output data structure description for workflow order mappers
        const WorkflowMapperOutput = {
            "staticdata": {
                "type": "hash",
                "desc": "the initial static data for the order",
                "mand": True,
            },
            "dynamicdata": {
                "type": "hash",
                "desc": "the initial dynamic data for the order",
            },
            "global_unique_key": {
                "type": "hash",
                "desc": "a hash giving one or more unique order keys for the order (across all workflows regardless of "
                    "workflowid, name, or version); keys are order key names and values are the string key values; if this "
                    "key already exists for any order in the system, then the order creation will fail with a "
                    "DUPLICATE-ORDER-KEY error; the hash key must be a valid order key, and the value is the unique key "
                    "value; this value will also be created as an order key",
            },
            "workflow_specific_unique_key": {
                "type": "hash",
                "desc": "a hash giving one or more unique order keys for the particular workflowid (which matches a "
                    "unique name and workflow version); keys are order key names and values are the string key values; if "
                    "any of the keys given already exists for an order with the target workflowid, then the order "
                    "creation will fail with a DUPLICATE-ORDER-KEY error; the hash key must be a valid order key, and the "
                    "value is the unique key value; this value will also be created as an order key",
            },
            "workflow_unique_key": {
                "type": "hash",
                "desc": "a hash giving one or more unique order keys for the particular workflow by name only (across all "
                    "workflows with the same name regardless of version); keys are order key names and values are the string "
                    "key values; if this key already exists for a workflow order with the same name, then the order creation "
                    "will fail with a DUPLICATE-ORDER-KEY error; the hash key must be a valid order key, and the value is the "
                    "unique key value; this value will also be created as an order key",
            },
            "orderkeys": {
                "type": "hash",
                "desc": "a hash of order keys for the order",
            },
        };
    }

    #! creates the order with the input data, returns the workflow_instanceid of the order created
    /** @param order_context_data the input data provided to the mapper (defined by the
        \c create-workflow-order-mapper config item)
        @param status the status of the workflow order to be created (set by config item
        \c create-workflow-order-status)
        @param dup a reference to a bool, will be set to @ref True if the workflow order already exists according to
        unique keys suppplied by the mapper

        @return the workflow_instanceid of the order created

        @throw DUPLICATE-ORDER-KEY if unique options are provided to the @ref UserApi::createOrder() call and more
        than one order conflicts with the unique keys given, then this exception is thrown in all cases; this
        exception is also thrown even with one match if the \c create-workflow-duplicate-handling config item is set
        to \c "DUPLICATE"
    */
    static int createWorkflowOrder(hash<auto> order_context_data = {}, hash<CreateOrderOptionInfo> opts = <CreateOrderOptionInfo>{}, *reference<bool> dup) {
        # create the workflow order with the mapper
        Mapper mapper = UserApi::getMapper(opts.mapper, opts.mapper_opts);
        hash<auto> order_data = mapper.mapData(order_context_data);
        UserApi::logInfo("mapper %y mapped order data: %y", opts.mapper, order_data);

        string wfdesc = opts.workflow;
        if (opts.version) {
            wfdesc += sprintf(" v%s", opts.version);
        }

        softint workflow_instanceid;
        try {
            workflow_instanceid = UserApi::createOrder(
                opts.workflow,
                opts.version,
                order_data,
                opts.status,
            );
            UserApi::logInfo("Created %s order instance id: %d with status %y", wfdesc, workflow_instanceid, opts.status);
            return workflow_instanceid;
        } catch (hash<ExceptionInfo> ex) {
            if (ex.err == "DUPLICATE-ORDER-KEY") {
                # check if there's only one order
                if (ex.arg.workflow_instance_ids.size() == 1
                    && UserApi::getConfigItemValue("create-workflow-duplicate-handling") == RE_SUCCESS) {
                    workflow_instanceid = ex.arg.workflow_instance_ids[0];
                    log(LL_INFO, "duplicate order detected: order instance ID %y was detected (%s: %s)",
                        workflow_instanceid, ex.err, ex.desc);
                    dup = True;
                    return workflow_instanceid;
                }
            }
            UserApi::logError("duplicate %s order error: %s: %s (ids: %y)", wfdesc, ex.err, ex.desc, ex.arg.workflow_instance_ids);
            rethrow;
        }
    }

    #! returns the config items as documented in the class documentation
    static hash<string, hash<ConfigItemInfo>> getConfigItems() {
        return {
            # order creation
            "create-workflow-order-mapper": <ConfigItemInfo>{
                "description": "the name of the mapper to create the workflow order data",
                "strictly_local": True,
                "config_group": "Create Workflow Order",
            },
            "create-workflow-name": <ConfigItemInfo>{
                "description": "the name of the workflow",
                "strictly_local": True,
                "config_group": "Create Workflow Order",
            },
            "create-workflow-version": <ConfigItemInfo>{
                "type": "*string",
                "default_value": NOTHING,
                "description": "the version of the workflow; if not set (the default), the latest version will be used",
                "strictly_local": True,
                "config_group": "Create Workflow Order",
            },
            "create-workflow-order-status": <ConfigItemInfo>{
                "type": "string",
                "default_value": OMQ::StatReady,
                "allowed_values": (OMQ::StatReady, OMQ::StatBlocked),
                "description": "the initial status of the workflow order",
                "strictly_local": True,
                "config_group": "Create Workflow Order",
            },

            # order creation recovery
            "create-workflow-duplicate-handling": <ConfigItemInfo>{
                "description": "how should workflows with duplicate unique keys be handled: SUCCESS = the workflow "
                    "order instance ID is returned normally, DUPLICATE = the DUPLICATE-ORDER-KEY exception is "
                    "rethrown",
                "default_value": RE_SUCCESS,
                "strictly_local": True,
                "allowed_values": (RE_SUCCESS, RE_DUPLICATE),
                "config_group": "Create Workflow Order Recovery",
            },
        };
    }
}
# END