%new-style
%require-types
%strict-args
%enable-all-warnings

%requires RestClient
%requires Swagger

#! this base building block makes a REST request using a REST connection and also supports recovery in cae of technical errors in the original request
/** @see @ref BBM_RestAction for configuration items supplied by the base class

    The following configuration items are provided by this class; note that subclasses must provide default values
    for required config items (in bold):
    - \b \c rest-supports-recovery: (required) set to true if the request requires and supports validation,
      false if not; if true then \c \b rest-recovery-uri must be set
    - \c rest-recovery-uri: (optional) the template for the GET request when querying the server about the original
      request; required if \c rest-supports-recovery is true
    - \c rest-recovery-id-location: the location of the unique ID for the record in the REST recovery response;
      conflicts with \c rest-recovery-response-location; if not set and \c rest-id-location is set, then
      \c rest-id-location will be used for this value
    - \c rest-recovery-response-location: the location of the recovery value in the recovery response message to
      check; the value to check must be set with \c rest-recovery-response-value; conflicts with
      \c rest-recovery-id-location; only used if \c rest-id-location is not set; the value here is related to the
      entire HTTP response; prefix with \c "body." to compare values in the response message body (ex:
      \c "body.account.ID")
    - \c rest-recovery-response-value: the value to compare against the value given by
      \c rest-recovery-response-location; must be set with \c rest-recovery-response-location; conflicts with
      \c rest-recovery-id-location; only used if \c rest-id-location is not set
    - \c rest-recovery-output-data: the configuration of output data taking the recovery message on input; the REST
      recovery response hash is passed as input to the UserApi::updateOutputData() method; the deserialized REST
      response body is located in the 'body' key of this hash; if \c rest-id-location or \c rest-recovery-id-location
      is configured, then the value retrieved can be referenced with key 'rest-id' in the output data hash; if this
      configuration item is not set, and \c rest-output-data is set, then \c rest-output-data will be used instead
      (for example in case the original message response is identical to the recovery message response for the
      purposes of output data)

    The recovery() method will determine that the REST call must be retried if one of the two conditions occurs:
    - A <tt>404 Not Found</tt> response is provided when queried with the recovery URI path
      (config item \c rest-recovery-uri)
    - The request succeeds but the unique response ID (identified with config item \c rest-id-location) is not
      provided in the response

    If either of these conditions occur, the recovery() method returns @ref OMQ::StatRetry.
*/
class BBM_RestActionWithRecovery inherits BBM_RestAction {
    #! REST action method suitable for use a validation connector
    /** @param request_info if the key \c get_uri_path is used, then it will be used for the \c GET request,
        otherwise the \a rest-recovery-uri config item value is used

        @returns a status code:
        - @ref OMQ::StatRetry: the REST request should be retried; the original request has not been processed
        - @ref OMQ::StatComplete: the REST request should not be repeated; the original request was successfully
          processed
    */
    string makeRestValidationRequestConnector(*hash<auto> request_info) {
        return doRecoveryIntern(request_info.get_uri_path);
    }

    # query the server to check if the original message was delivered
    /** this logic guarantees that we never create the object twice for the same request

        @returns a status code:
        - @ref OMQ::StatRetry: the REST request should be retried; the original request has not been processed
        - @ref OMQ::StatComplete: the REST request should not be repeated; the original request was successfully
          processed
    */
    private string recovery() {
        if (!UserApi::getConfigItemValue("rest-supports-recovery")) {
            UserApi::logInfo("request does not support recovery; retrying");
            return OMQ::StatRetry;
        }

        # get the URI path for the GET request for creating the object
        return doRecoveryIntern();
    }

    # query the server to check if the original message was delivered
    /** this logic guarantees that we never create the object twice for the same request

        @param get_uri_path the URI path to use for the GET request

        @returns a status code:
        - @ref OMQ::StatRetry: the REST request should be retried; the original request has not been processed
        - @ref OMQ::StatComplete: the REST request should not be repeated; the original request was successfully
          processed
    */
    private string doRecoveryIntern(string get_uri_path = UserApi::getConfigItemValue("rest-recovery-uri")) {
        # get the connection to the REST API
        RestClient rc = getConnection();
        # info hash for the REST GET request
        hash<auto> info;
        # for the REST response
        hash<auto> response;
        UserApi::logInfo("executing REST recovery request: GET %s", get_uri_path);
        try {
            # ensure that request info gets logged
            on_exit {
                UserApi::logDebug("REST RECOVERY REQUEST INFO: %N", info);
            }
            # try to retrieve object ID from the unique request ID
            *hash<auto> hdr = UserApi::getConfigItemValue("rest-headers");
            response = rc.get(get_uri_path, NOTHING, \info, hdr);
        } catch (hash<ExceptionInfo> ex) {
            # if not found, then retry
            if (info."response-code" == 404) {
                # no object exists; retry the object creation logic
                UserApi::logInfo("%y: 404 Not Found; retrying", get_uri_path);
                return OMQ::StatRetry;
            }
            # for any other errors, rethrow the exception
            rethrow;
        }
        UserApi::logDebug("REST RECOVERY RESPONSE: %N", response);

        # get the location of the unique ID in the response
        *string unique_id_loc = UserApi::getConfigItemValue("rest-recovery-id-location")
            ?? UserApi::getConfigItemValue("rest-id-location");
        if (unique_id_loc) {
            # unique object ID to be returned
            auto unique_object_id = UserApi::getHashDotValue(response, unique_id_loc);
            if (!unique_object_id.val()) {
                UserApi::logInfo("cannot find unique ID in response body in location %y; body: %N; retrying",
                    unique_id_loc, response.body);
                return OMQ::StatRetry;
            }

            # log recovery message
            UserApi::logInfo(UserApi::getConfigItemValue("rest-recovery-id-log-msg", {"rest-id": unique_object_id}));

            # object was created; save output and continue
            updateRecoveryOutputData(response, unique_object_id);

            # step has been recovered
            return OMQ::StatComplete;
        }

        # get the recovery location
        *string recovery_loc = UserApi::getConfigItemValue("rest-recovery-response-location");
        if (!exists recovery_loc) {
            throw "CONFIG-ERROR", "neither \"rest-recovery-id-location\" nor "
            "\"rest-recovery-response-location\" are set; set \"rest-supports-recovery\" to false or configure "
            "recovery options in order to continue processing this workflow order";
        }
        auto recovery_val = UserApi::getConfigItemValue("rest-recovery-response-value");

        # check response for value
        auto val = UserApi::getHashDotValue(response, recovery_loc);

        if (recovery_val == val) {
            UserApi::logInfo("REST RECOVERY %y = %y in the recovery response; step is already COMPLETE", recovery_loc, val);

            # object was created; save output and continue
            updateRecoveryOutputData(response);

            # step has been recovered
            return OMQ::StatComplete;
        }

        UserApi::logInfo("%y != %y (current value: %y); step must be retried", recovery_loc, recovery_val, val);
        # step has been recovered
        return OMQ::StatRetry;
    }

    #! processes output data with recovery data
    private updateRecoveryOutputData(hash<auto> response, auto unique_object_id) {
        *hash<auto> recovery_output_data = UserApi::getConfigItemValue("rest-recovery-output-data", NOTHING, False)
            ?? UserApi::getConfigItemValue("rest-output-data", NOTHING, False);
        if (recovery_output_data) {
            UserApi::updateOutputData(response + {"rest-id": unique_object_id}, recovery_output_data);
        }
    }
}
