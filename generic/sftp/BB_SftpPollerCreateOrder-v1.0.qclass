# name: BB_SftpPollerCreateOrder
# version: 1.0
# desc: class for polling for files from an SFTP server and creating a workflow order from them
# author: Qore Technologies, s.r.o.
# requires: BB_SftpPollerBase
# requires: BB_CreateOrder
%new-style
%require-types
%strict-args
%enable-all-warnings

%requires SftpPoller

#! this base building block polls an SFTP server for files
/**
*/
class BB_SftpPollerCreateOrder inherits BB_SftpPollerBase, BB_CreateOrder {
    #! called for each matching file individually whenever matching files are polled with the list of matching file names; if any error occurs here, the error is logged and the polling operation is retried
    /** @param fih a hash of file data and information with the following keys:
        - \c name: the name of the file, link, or directory
        - \c size: the size of the file in bytes
        - \c uid: the UID of the owner of the file
        - \c gid: the GID of the owner of the file
        - \c mode: the permissions / mode of the file
        - \c atime: the last accessed date/time of the file
        - \c mtime: the last modified date/time of the file
        - \c type: the type of file; one of: \c "REGULAR", \c "DIRECTORY", \c "SYMBOLIC-LINK", \c "BLOCK-DEVICE",
          \c "CHARACTER-DEVICE", \c "FIFO", \c "SYMBOLIC-LINK", \c "SOCKET", or \c "UNKNOWN"
        - \c perm: a string giving UNIX-style permissions for the file (ex: "-rwxr-xr-x")
        - \c data: this key is only present if \c sftp-polling-file-connection not set; in this case the remote file
          data is retrieved in memory and stored in this key as binary data
        - \c filepath: the remote filepath relative to SFTP root directory

        @return the event with the following additional keys:
        - \c order_status: the status of the new order created
        - \c workflow_instanceid: the workflow instance ID of the new order created
    */
    hash<auto> singleFileEventImpl(hash<auto> event) {
        string status = UserApi::getConfigItemValue("create-workflow-order-status");
        bool dup = False;
        int wfiid = createWorkflowOrder(event, status, \dup);
        if (dup) {
            # get real order status
            status = UserApi::callRestApi("GET", "orders/" + wfiid + "/workflowstatus");
        }
        event += {
            "order_status": status,
            "workflow_instanceid": wfiid,
            "duplicate": dup,
        };
        return event;
    }

    #! called for each matching file individually whenever matching files are polled with the list of matching file names; if any error occurs here, the error is logged and the polling operation is retried
    /** @param fih a hash of file data and information with the following keys:
        - \c name: the name of the file, link, or directory
        - \c size: the size of the file in bytes
        - \c uid: the UID of the owner of the file
        - \c gid: the GID of the owner of the file
        - \c mode: the permissions / mode of the file
        - \c atime: the last accessed date/time of the file
        - \c mtime: the last modified date/time of the file
        - \c type: the type of file; one of: \c "REGULAR", \c "DIRECTORY", \c "SYMBOLIC-LINK", \c "BLOCK-DEVICE",
          \c "CHARACTER-DEVICE", \c "FIFO", \c "SYMBOLIC-LINK", \c "SOCKET", or \c "UNKNOWN"
        - \c perm: a string giving UNIX-style permissions for the file (ex: "-rwxr-xr-x")
        - \c data: this key is only present if \c sftp-polling-file-connection not set; in this case the remote file
          data is retrieved in memory and stored in this key as binary data
        - \c filepath: the remote filepath relative to SFTP root directory
        - \c local_path: this key is set to a string giving the local path where the file's data is stored if
          config item \c sftp-polling-file-connection is set

        If config item \c sftp-polling-delete-file is true, then the remote file is deleted here.

        Otherwise, if \c sftp-polling-move-target is true, then the remove file is moved to the target location on the
        remove server here.
    */
    hash<auto> postSingleFileEvent(hash<auto> event) {
        event = BB_SftpPollerBase::postSingleFileEvent(event);
        # now unblock the order if necessary
        if (event.order_status == OMQ::StatBlocked) {
            UserApi::unblockOrder(event.workflow_instanceid);
            UserApi::logInfo("unblocked order %d for further processing", event.workflow_instanceid);
        }
        return event;
    }

    #! config items for this object defined in BB_SftpPollerBase and BB_CreateOrder
    /** the \c create-workflow-order-status default value is set to @ref OMQ::StatBlocked "BLOCKED"
    */
    static hash<string, hash<ConfigItemInfo>> getConfigItems() {
        hash<string, hash<ConfigItemInfo>> rv = BB_SftpPollerBase::getConfigItems()
            + BB_CreateOrder::getConfigItems();
        rv."create-workflow-order-status".default_value = OMQ::StatBlocked;
        return rv;
    }
}
# END
