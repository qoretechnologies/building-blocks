#!/usr/bin/env qore
#
# SftpJobModule integration test

%new-style
%require-types
%enable-all-warnings

%exec-class MainTest

%requires FsUtil
%requires QorusInterfaceTest
%requires Util
%requires ssh2

const DIR_UPLOAD = "upload";
const FILE_DATA = "Hello world!";

class MainTest inherits QorusJobTest {

    private {
        SFTPClient sftp;
    }

    constructor() : QorusJobTest ("polling-test-job", "1.0", \ARGV) {
        addTestCase("test all steps", \test_1());
        addTestCase("test all steps", \test_2());
        set_return_value(main());
    }

    setUp() {
        sftp = get_user_connection("sftp-local-test");
    }

    #! Create a file with given content and name on SFTP and return remote path to it
    string create_file_on_sftp(string file_name, any file_data) {
        TmpFile tmp_file = new TmpFile();
        int size = tmp_file.file.write(file_data);
        tmp_file.file.close();

        # copy the file to sftp
        string rpath = file_name;
        size = sftp.transferFile(tmp_file.path, rpath);

        return rpath;
    }

    assert_file_on_sftp(hash order, string sub_dir) {
        string filename = order.staticdata.file_name;
        string path = sprintf("%s/%s.%s", sub_dir, filename, order.workflow_instanceid);
        assertTrue(exists sftp.stat(path), sprintf("check that file %s exists in %s directory", filename, sub_dir));
    }

    test_1() {
        string wf_name = "POLLING-TEST-PROCESS-WF";
        string wf_ver = "1.0";
        string job_name = "polling-test-job";
        hash order_data = test_file("test1_%s.txt", FILE_DATA, job_name, wf_name, wf_ver);
        assert_file_on_sftp(order_data, DIR_UPLOAD);
    }

    test_2() {
        string wf_name = "POLLING-TEST-PROCESS2-WF";
        string wf_ver = "1.0";
        string job_name = "polling-test-job2";
        hash order_data = test_file("test2_%s.txt", FILE_DATA, job_name, wf_name, wf_ver);
        assert_file_on_sftp(order_data, DIR_UPLOAD);
    }

    hash test_file(string file_mask, any file_data, string job_name, string wf_name, string wf_ver) {
        string file_name = sprintf(file_mask, format_date("YYYYMMDDHHmmSS", now()));
        printf("FILE: %y\n", file_name);

        string rpath = create_file_on_sftp(file_name, file_data);
        file_name = (rpath =~ s/.*\///);

        *hash ret = qrest.put("jobs/" + job_name + "?action=run");
        printf("job ran: %y\n", ret);

        any order = exec(new FindOrderByKey(wf_name, wf_ver, "file_name", file_name));
        printf("order found: %N\n", order);

        # wait for the workflow order to complete
        softint wfiid = order.getInstanceId();
        printf("WFIID: %y\n", wfiid);
        exec(new WaitForWfiid(wfiid));

        *hash order_data = qrest.get(sprintf("orders/%s", wfiid));
        printf("order data: %y\n", order_data);

        assertTrue(exists order_data);
        return order_data;
    }
}
