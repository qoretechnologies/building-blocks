# -*- mode: qore; indent-tabs-mode: nil -*-

%requires qore >= 0.9

%new-style
%require-types
%strict-args
%enable-all-warnings

module BuildingBlocksCommon {
    version = "1.0";
    desc = "A common functionality for Building Blocks";
    author = "Qore Technologies <info@qoretechnologies.com>";
    url = "http://www.qoretechnologies.com";
}

public namespace BuildingBlocksCommon {

    const INPUT_DATA_CFG_KEY = "input_data";
    const OUTPUT_DATA_CFG_KEY = "output_data";

    hashdecl InOutBBData {
        string type; # static, dynamic, step, sensitive, keys, config
        string field; # name of the field
    }

    public auto sub getInputData(string field_name, *hash input_data_cfg) {
        input_data_cfg = input_data_cfg{field_name} ?? WorkflowApi::getConfigItemValue(INPUT_DATA_CFG_KEY){field_name};

        if (!exists input_data_cfg) {
            throw "INVALID-ARGUMENT", sprintf("Input data config doesn't contain field '%s'", field_name);
        }
        hash input_data = getInputData({field_name: input_data_cfg});
        if (!exists input_data{field_name}) {
            throw "INVALID-ARGUMENT", sprintf("Input data field '%s' was not found", field_name);
        }
        return input_data{field_name};
    }

    public hash sub getInputData(*hash input_data_cfg) {
        input_data_cfg = input_data_cfg ?? WorkflowApi::getConfigItemValue(INPUT_DATA_CFG_KEY);

        hash input_data = {};
        HashIterator input_data_cfg_it(input_data_cfg);
        while (input_data_cfg_it.next()) {
            string field_name = input_data_cfg_it.getKey();
            hash<InOutBBData> cfg = cast<hash<InOutBBData>>(input_data_cfg_it.getValue());
            auto value;
            switch (cfg.type) {
                case "static":
                    value = WorkflowApi::getStaticData(cfg.field);
                    break;
                case "dynamic":
                    value = WorkflowApi::getDynamicData(cfg.field);
                    break;
                case "sensitive":
                    # TODO skey/svalue?
                    value = WorkflowApi::getSensitiveData(cfg.field, "");
                    break;
                case "step":
                    # TODO
                    break;
                case "keys":
                    value = WorkflowApi::getOrderKeys(cfg.field);
                    break;
                case "config":
                    value = WorkflowApi::getConfigItemValue(cfg.field);
                    break;
                default:
                    throw "INVALID-ARGUMENT",
                          sprintf("Input config data type can be either 'static', 'dynamic', 'sensitive', 'step', 'keys' or 'config'. '%s' given.",
                                  cfg.type);
            }
            input_data{field_name} = value;
        }
        return input_data;
    }

    public nothing sub updateOutputData(string field_name, auto output_data, *hash output_data_cfg) {
        updateOutputData({field_name: output_data}, output_data_cfg);
    }

    public nothing sub updateOutputData(hash all_output_data, *hash output_data_cfg) {
        output_data_cfg = output_data_cfg ?? WorkflowApi::getConfigItemValue(OUTPUT_DATA_CFG_KEY);

        HashIterator output_data_it(all_output_data);
        while (output_data_it.next()) {
            string field_name = output_data_it.getKey();
            auto value = output_data_it.getValue();
            hash<InOutBBData> cfg = cast<hash<InOutBBData>>(output_data_cfg{field_name});
            switch (cfg.type) {
                case "dynamic":
                    value = WorkflowApi::updateDynamicData({cfg.field: value});
                    break;
                case "sensitive":
                    # TODO skey/svalue?
                    value = WorkflowApi::updateSensitiveData("", "", {field_name: value});
                    break;
                case "step":
                    # TODO
                    break;
                case "keys":
                    value = WorkflowApi::appendOrderKeys({cfg.field: value});
                    break;
                default:
                    throw "INVALID-ARGUMENT",
                          sprintf("Output config data type can be either 'dynamic', 'sensitive', 'step' or 'keys'. '%s' given.",
                                  cfg.type);
            }
        }
    }

    public string sub expandTemplatedString(string str, hash<string, string> templates) {
        # TODO
        foreach auto template_pair in (templates.pairIterator()) {
             str = replace(str, template_pair.key, template_pair.value);
        }
        return str;
    }


}
