# -*- mode: qore; indent-tabs-mode: nil -*-
# @file CrmCustomerExampleSchema.qsm Qorus Integration System customer example user schema description module

/*  CrmCustomerExampleSchema.qsm Copyright 2022 - 2023 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

%requires qore >= 1.0

module CrmCustomerExampleSchema {
    version = "1.0";
    desc = "Qorus CRM customer example user schema module";
    author = "Qore Technologies <info@qoretechnologies.com>";
    url = "https://qoretechnologies.com";
}

# here we add fallback paths to the QORE_MODULE_DIR search path,
# in case QORE_MODULE_DIR is not set properly for Qorus
%append-module-path /var/opt/qorus/qlib:$OMQ_DIR/qlib:/opt/qorus/qlib

%requires Schema
%requires SqlUtil

%new-style
%strict-args
%require-types
%strict-args
%enable-all-warnings

# private namespace for private schema declarations
namespace Private {
    # returns a trigger function for the given table for PostgreSQL
    hash<auto> sub get_pgsql_trigger_func(string name, bool insert_only = False, *string col, *string seq,
            bool has_modified = True) {
        string sql =
            "returns trigger language plpgsql as $function$\n"
            "begin\n"
            "  if (tg_op = 'INSERT') then\n";

        if (col && seq) {
            sql += sprintf(
                "    if new.%s is null then\n"
                "      select nextval('%s') into new.%s;\n"
                "    end if;\n",
                col, seq, col
            );
        }

        sql +=
            "    if new.created is null then\n"
            "      select current_timestamp into new.created;\n"
            "    end if;\n";

        if (has_modified) {
            sql +=
                "    if new.modified is null then\n"
                "      select current_timestamp into new.modified;\n"
                "    end if;\n";
        }

        if (insert_only) {
            sql += "  end if;\n";
        } else {
            sql +=
                "  else\n"
                "    if (tg_op = 'UPDATE') then\n";

            if (has_modified) {
                sql +=
                    "      if new.modified is null or new.modified = old.modified then\n"
                    "        select current_timestamp into new.modified;\n"
                    "      end if;\n";
            } # modified

            sql +=
                "    end if;\n"
                "  end if;\n";
        }

        sql += "  return new;\n"
            "end;\n"
            "$function$";

        return {
            "functions": {
                "trig_" + name + "()": sql,
            },
        };
    }

    # returns a trigger for a PostgreSQL table calling a trigger function
    hash<auto> sub get_pgsql_trigger(string name, bool insert_only = False) {
        return ("trig_" + name: sprintf("before insert %son %s for each row execute procedure trig_%s()",
            insert_only ? "" : "or update ", name, name));
    }

    # returns a trigger for a MySQL / MariaDB table
    hash<auto> sub get_mysql_triggers(string name, bool insert_only = False, *string col, *string seq) {
        string sql = "before insert on " + name + " for each row\nbegin\n";

        if (col && seq) {
            sql += sprintf("  if new.%s is null or new.%s = 0 then\n"
                "    set new.%s = my_nextval('%s');\n"
                "  end if;\n", col, col, col, seq);
        }

        sql +=
            "  if new.created is null then\n"
            "    set new.created = now();\n"
            "  end if;\n";
        if (!insert_only) {
            sql +=
                "  if new.modified is null then\n"
                "    set new.modified = now();\n"
                "  end if;\n";
        }
        sql += "end";

        return ("trig_" + name + "_insert": sql) +
            (insert_only ? NOTHING : (
                "trig_" + name + "_update": "before update on " + name + " for each row\n"
                "begin\n"
                "  if new.modified is null or new.modified = old.modified then\n"
                "    set new.modified = now();\n"
                "  end if;\n"
                "end\n"
            ));
    }

    # returns a trigger for an Oracle table
    hash<auto> sub get_oracle_trigger(string name, bool insert_only = False, *string col, *string seq,
            *string trig_pfx) {
        string sql = sprintf("BEFORE INSERT%s ON %s\n"
            "REFERENCING NEW AS NEW OLD AS OLD\n"
            "FOR EACH ROW\n"
            "begin\n"
            "  if inserting then\n", insert_only ? "" : " OR UPDATE", name.upr());
        if (col && seq) {
            sql += sprintf(
                "    if :new.%s is null then\n"
                "      select %s.nextval into :new.%s from dual;\n"
                "    end if;\n", col, seq, col
            );
        }
        sql +=
            "    if :new.created is null then\n"
            "      :new.created := localtimestamp;\n"
            "    end if;\n"
            "  end if;\n";
        if (!insert_only) {
            sql += "  --\n"
                "  if :new.modified is null or :new.modified = :old.modified then\n"
                "    :new.modified := localtimestamp;\n"
                "  end if;\n";
        }
        sql += "end;\n";
        return {"trig_" + (trig_pfx ?? name): sql};
    }

    const GenericOptions = {
        "replace": True,
    };

    const IndexOptions = {
        "driver": {
            "oracle": {
                "compute_statistics": True,
            },
        },
    };

    const ColumnOptions = {
        "driver": {
            "oracle": {"character_semantics": True,},
        },
    };

    const T_CrmCustomerExample = {
        "columns": {
            "id": c_int(True, "PK customer ID field"),
            "name": c_varchar(200, True, "customer name"),
            "type": c_varchar(20, True, "customer type code"),
            "taxid": c_varchar(50, True, "customer tax ID"),

            "created": c_timestamp(True, "created timestamp"),
            "modified": c_timestamp(True, "modified timestamp"),
        },
        "primary_key": {"name": "pk_customer_example", "columns": ("id")},
        "indexes": {
            "sk_customer_example_taxid": {"columns": ("taxid"), "unique": True},
            "driver": {"oracle": {"pk_customer_example": {"columns": "id", "unique": True}}},
        },
        # for PostgreSQL we need a trigger function on the table
        "driver": {
            "pgsql": get_pgsql_trigger_func("crm_customer_example", False, "id", "seq_crm_customer_example"),
        },
        "triggers": {
            "driver": {
                "oracle": get_oracle_trigger("crm_customer_example", False, "id", "seq_crm_customer_example"),
                "pgsql": get_pgsql_trigger("crm_customer_example"),
                "mysql": get_mysql_triggers("crm_customer_example", False, "id", "seq_crm_customer_example"),
            },
        },
    };

    const T_CrmAddressExample = {
        "columns": {
            "id": c_int(True, "PK address ID field"),
            "cust_id": c_int(True, "customer ID field"),

            "name": c_varchar(200, True, "the addressee"),
            "address_line_1": c_varchar(200, True, "Street address line 1"),
            "address_line_2": c_varchar(200, False, "Street address line 2"),
            "address_line_3": c_varchar(200, False, "Street address line 3"),
            "city": c_varchar(200, True, "city name"),
            "postal_code": c_varchar(30, False, "postal code"),
            "region": c_varchar(200, False, "state / province / region"),
            "country": c_varchar(100, True, "country name"),

            "created": c_timestamp(True, "created timestamp"),
            "modified": c_timestamp(True, "modified timestamp"),
        },
        "primary_key": {"name": "pk_address_example", "columns": ("id")},
        "indexes": {
            "sk_address_example_customer": {"columns": ("cust_id")},
            "driver": {"oracle": {"pk_address_example": {"columns": "id", "unique": True}}},
        },
        "foreign_constraints": {
            "fk_crm_address_example_cust": {
                "columns": "cust_id",
                "table": "crm_customer_example",
                "target_columns": "id",
            },
        },
        # for PostgreSQL we need a trigger function on the table
        "driver": {
            "pgsql": get_pgsql_trigger_func("crm_address_example", False, "id", "seq_crm_address_example"),
        },
        "triggers": {
            "driver": {
                "oracle": get_oracle_trigger("crm_address_example", False, "id", "seq_crm_address_example"),
                "pgsql": get_pgsql_trigger("crm_address_example"),
                "mysql": get_mysql_triggers("crm_address_example", False, "id", "seq_crm_address_example"),
            },
        },
    };

    const Tables = {
        "crm_customer_example": T_CrmCustomerExample,
        "crm_address_example": T_CrmAddressExample,
    };

    const Sequences = {
        "seq_crm_customer_example": {},
        "seq_crm_address_example": {},
    };
}

public namespace CrmCustomerExampleSchema {
    public string sub get_datasource_name() {
        return "omquser";
    }

    public CrmCustomerExampleSchema sub get_user_schema(AbstractDatasource ds, *string dts, *string its) {
        return new CrmCustomerExampleSchema(ds, dts, its);
    }

    public class CrmCustomerExampleSchema inherits AbstractSchema {
        public {
            const SchemaName = "CrmCustomerExampleSchema";
            const SchemaVersion = "1.0";
        }

        constructor(AbstractDatasource ds, *string dts, *string its) : AbstractSchema(ds, dts, its) {
        }

        private string getNameImpl() {
            return SchemaName;
        }

        private string getVersionImpl() {
            return SchemaVersion;
        }

        private *hash<auto> getTablesImpl() {
            return Tables;
        }

        private *hash<auto> getSequencesImpl() {
            return Sequences;
        }

        private *hash<auto> getIndexOptionsImpl() {
            return IndexOptions;
        }

        private *hash<auto> getGenericOptionsImpl() {
            return GenericOptions;
        }

        private *hash<auto> getColumnOptionsImpl() {
            return ColumnOptions;
        }
    }
}
