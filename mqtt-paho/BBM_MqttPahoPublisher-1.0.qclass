%new-style
%strict-args
%require-types
%enable-all-warnings

class BBM_MqttPahoPublisher inherits BBM_MqttPahoClient {
    public {}

    constructor() {
        connect();
    }

    destructor() {
        if (isConnected()) {
            disconnect();
        }
    }

    /** Connector for publishing messages

        @param input the input data for the message, converted to a String and then byte[] for publishing

        @return the MqttMessage object

        @throws MQTT-PAHO-PUBLISHER-ERROR invalid type passed
    */
    public MqttMessage publish(auto input) {
        return publishIntern(input);
    }

    /** Connector for publishing messages from configuration

        @param input available in the \a input key of local context data (i.e. <tt>$local:input</tt> when looking up
        config item values)

        @throws MQTT-PAHO-PUBLISHER-ERROR invalid type passed
    */
    public MqttMessage publishFromConfig(auto input) {
        hash<auto> local_context = {"input": input};
        return publishIntern(NOTHING, local_context);
    }

    private MqttMessage publishIntern(auto input, *hash<auto> local_context) {
        if (!exists input) {
            input = UserApi::getConfigItemValue("mqtt-paho-message-body", local_context);
        }
        binary body;
        if (input instanceof binary) {
            body = input;
        } else {
            string str;
            if (input instanceof string) {
                str = input;
            } else {
                if (!input.strp()) {
                    throw "MQTT-PAHO-PUBLISHER-ERROR", sprintf("cannot publish message from type %y which is not "
                        "convertible to a binary", input.type());
                }
                str = input.toString();
            }
            body = str.toBinary();
        }

        MqttMessage msg(body);
        int qos = UserApi::getConfigItemValue("mqtt-paho-message-qos", local_context);
        msg.setQos(qos);
        string topic = UserApi::getConfigItemValue("mqtt-paho-message-topic", local_context);
        UserApi::logInfo("publishing MQTT message to server: %y topic: %y QOS: %d bytes: %d",
            getCurrentServerURI(), topic, qos, body.size());
        publish(topic, msg);
        return msg;
    }
}
