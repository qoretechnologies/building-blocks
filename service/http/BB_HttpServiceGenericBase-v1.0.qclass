# -*- mode: qore; indent-tabs-mode: nil -*-

# name: BB_HttpServiceGenericBase
# version: 1.0
# desc: base class for HTTP handler services
# author: Qore Technologies, s.r.o.

%new-style
%require-types
%strict-args
%enable-all-warnings

class BB_HttpServiceGenericBase inherits QorusService {
    public {
        const CS_REQUIRE_CLIENT_CERT = "REQUIRE-CLIENT-CERT";
        const CS_NO_CLIENT_CERT_REQUIRED = "NO-CLIENT-CERT-REQUIRED";
        const CS_REQUEST_CLIENT_CERT = "REQUEST-CLIENT-CERT";

        const SSL_MAP = {
            CS_REQUIRE_CLIENT_CERT: SSL_VERIFY_FAIL_IF_NO_PEER_CERT | SSL_VERIFY_PEER,
            CS_NO_CLIENT_CERT_REQUIRED: SSL_VERIFY_NONE,
            CS_REQUEST_CLIENT_CERT: SSL_VERIFY_PEER,
        };
    }

    # name: init
    # desc: initializes the REST handler
    init() {
        initImpl();
    }

    private initImpl() {
        setupHandler();
    }

    private setupHandler() {
        AbstractServiceHttpHandler handler = getHandlerImpl();
        setupHandlerIntern(handler);
        bindHttp(handler);
    }

    static private setupHandlerIntern(AbstractServiceHttpHandler handler) {
        *string bind = ServiceApi::getConfigItemValue("http-listener-bind-address");
        if (!exists bind) {
            return;
        }
        hash<HttpListenerOptionInfo> info = http_get_listener_options_from_bind(bind);
        if (*string resource_name = ServiceApi::getConfigItemValue("http-listener-cert-resource")) {
            data cert_data = ServiceApi::getResourceData(resource_name);
            info.cert = new SSLCertificate(cert_data);
        }
        if (*string resource_name = ServiceApi::getConfigItemValue("http-listener-key-resource")) {
            data key_data = ServiceApi::getResourceData(resource_name);
            if (key_data.typeCode() == NT_STRING) {
                info.key = new SSLPrivateKey(key_data, ServiceApi::getConfigItemValue("http-listener-key-password"));
            } else {
                info.key = new SSLPrivateKey(key_data);
            }
        }
        if (ServiceApi::getConfigItemValue("http-listener-accept-all-certs")) {
            info.ssl_accept_all_certs = True;
        }
        if (ServiceApi::getConfigItemValue("http-listener-capture-client-certs")) {
            info.get_remote_certs = True;
        }
        info.ssl_verify_flags = SSL_MAP{ServiceApi::getConfigItemValue("http-listener-ssl-mode")};
        handler.addListener(info);
    }

    private abstract AbstractServiceHttpHandler getHandlerImpl();

    private *hash<string, hash<ConfigItemInfo>> getConfigItemsImpl() {
        return {
            "http-listener-bind-address":  <ConfigItemInfo>{
                "type": "*string",
                "default_value": NOTHING,
                "description": "optional bind address for a dedicated listener; if not set, then it will bind on all "
                    "Qorus system listeners as a global handler",
                "strictly_local": True,
                "config_group": "HTTP/S Listener",
            },
            "http-listener-cert-resource":  <ConfigItemInfo>{
                "type": "*string",
                "default_value": NOTHING,
                "description": "optional X.509 certificate resource name for a dedicated listener",
                "strictly_local": True,
                "config_group": "HTTP/S Listener",
            },
            "http-listener-key-resource":  <ConfigItemInfo>{
                "type": "*string",
                "default_value": NOTHING,
                "description": "optional private key resource name for a dedicated listener",
                "strictly_local": True,
                "config_group": "HTTP/S Listener",
            },
            "http-listener-key-password":  <ConfigItemInfo>{
                "type": "*string",
                "default_value": NOTHING,
                "description": "optional password to PEM private key data for a dedicated listener",
                "strictly_local": True,
                "config_group": "HTTP/S Listener",
            },
            "http-listener-ssl-mode":  <ConfigItemInfo>{
                "type": "string",
                "default_value": CS_NO_CLIENT_CERT_REQUIRED,
                "description": "set the SSL mode",
                "allowed_values": keys SSL_MAP,
                "strictly_local": True,
                "config_group": "HTTP/S Listener",
            },
            "http-listener-accept-all-certs":  <ConfigItemInfo>{
                "type": "bool",
                "default_value": True,
                "description": "flag to accept all client certificates",
                "strictly_local": True,
                "config_group": "HTTP/S Listener",
            },
            "http-listener-capture-client-certs":  <ConfigItemInfo>{
                "type": "bool",
                "default_value": True,
                "description": "flag to capture client certificates",
                "strictly_local": True,
                "config_group": "HTTP/S Listener",
            },
        };
    }
}
# END
